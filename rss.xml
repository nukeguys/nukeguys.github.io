<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[nukeguys blog]]></title><description><![CDATA[about development, life and something.]]></description><link>https://nukeguys.github.io/</link><generator>RSS for Node</generator><lastBuildDate>Thu, 24 Jan 2019 14:50:52 GMT</lastBuildDate><item><title><![CDATA[[TIL] GoAccess로 nginx access 로그 분석 겉핥기]]></title><description><![CDATA[MS에서도 엣지에 크로미움을 사용한다고 발표한 상황에서, 팀에서도 IE10을 더이상 지원하지 않기 위한 근거로 서비스 접속 대한 브라우저 통계가 필요했다. 가이드를 통해 nginx의 access 로그와  GoAccess…]]></description><link>https://nukeguys.github.io//dev/goaccess-analyzer/</link><guid isPermaLink="false">https://nukeguys.github.io//dev/goaccess-analyzer/</guid><pubDate>Thu, 24 Jan 2019 13:50:41 GMT</pubDate><content:encoded>&lt;p&gt;MS에서도 엣지에 크로미움을 사용한다고 발표한 상황에서, 팀에서도 IE10을 더이상 지원하지 않기 위한 근거로 서비스 접속 대한 브라우저 통계가 필요했다.&lt;br&gt;
가이드를 통해 nginx의 access 로그와 &lt;a href=&quot;https://goaccess.io/&quot;&gt;GoAccess&lt;/a&gt;에 대해 알게 되었고 이를 사용하여 간단하게 로그 분석을 해봤다.
단순하게 사용만 해본 터라 깊이는 없지만 오랜만에 사용해본 쉘 명령어도 되짚어 볼 겸 간단하게 정리해 본다.&lt;/p&gt;
&lt;p&gt;우선 서버에서 원격으로 접근 가능한 위치에 받아올 로그 파일을 미리 복사해 두고 scp를 통해 내려 받아 압축을 해제한다. (회사에서는 일주일 단위로 로그를 압축하여 백업하고 있었고, 실 서비스 서버이므로 로컬 PC로 로그파일을 내려 받아서 진행했다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# scp로 로그파일 내려받기&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;scp&lt;/span&gt; 계정@호스트:파일경로 저장할파일이름   &lt;span class=&quot;token comment&quot;&gt;# 원하는 파일만&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;scp&lt;/span&gt; -r 계정@호스트:폴더경로 ./ &lt;span class=&quot;token comment&quot;&gt;# 폴더 통째로&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# gzip/gunzip으로 압축 해제하기&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;gzip&lt;/span&gt; -d access.log-xxxxxxxx.gz &lt;span class=&quot;token comment&quot;&gt;# (gunzip access.log-xxxxxxxx.gz) 원하는 파일만&lt;/span&gt;
gunzip -r ./accesslog &lt;span class=&quot;token comment&quot;&gt;# 폴더의 압축파일들을 한 번에 해제&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;로그파일이 준비됐으니 GoAccess를 설치한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; goaccess&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GoAccess로 분석을 하기위해 로그파일의 포맷을 설정파일에 명시해야 한다. &lt;code class=&quot;language-text&quot;&gt;time-format&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;date-format&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;log-format&lt;/code&gt; 세 가지만 설정 해주고, 로그가 표준화된 형식일 경우 실행시에 옵션으로 넣어줘도 되는 듯 하다.&lt;br&gt;
미리 정의된 형식이 주석으로 있으니 해제하여 사용하거나 없으면 맞게 작성해주면 된다. 내 PC의 설정파일의 위치는 &lt;code class=&quot;language-text&quot;&gt;/usr/local/Cellar/goaccess/1.2_1/etc/goaccess.conf&lt;/code&gt;였다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;######################################&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Time Format Options (required)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;######################################&lt;/span&gt;
time-format %H:%M:%S

&lt;span class=&quot;token comment&quot;&gt;######################################&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Date Format Options (required)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;######################################&lt;/span&gt;
date-format %d/%b/%Y

&lt;span class=&quot;token comment&quot;&gt;######################################&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Log Format Options (required)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;######################################&lt;/span&gt;
log-format %h - %^ &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;%d:%t %^&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;%r&quot;&lt;/span&gt; %s %b &lt;span class=&quot;token string&quot;&gt;&quot;%R&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;%u&quot;&lt;/span&gt; %T &lt;span class=&quot;token string&quot;&gt;&quot;%^&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GoAccess를 사용하기 전에 필요한 로그를 가공 할 필요가 있었다.
&lt;a href=&quot;https://page.kakao.com&quot;&gt;카카오페이지 웹&lt;/a&gt;의 경우 PC와 모바일 버전이 다르고(당연히), 모바일의 경우 앱 내에서 호출하는 경우가 있어 제외시켜야 했다. 추가로 리다이렉션(응답코드 30X) 되는 경우도 로그가 중복이기 때문에 제외 시켰다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 앱에서 호출하는 경우 userAgent에 KakaoPage가 포함된다.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/KaKaoPage/d&apos;&lt;/span&gt; access.log-xxxxxxxx &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 1_only_web
&lt;span class=&quot;token comment&quot;&gt;# 응답코드 30X인 레코드를 제외시킨다.(더 정확하게 할 수 있겠지만 이 정도만 해도 충분했다.)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/&quot; 30. /d&apos;&lt;/span&gt; 1_only_web &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 2_delete_redirect&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GoAccess를 실행시켜 로그 파일을 분석하고 결과를 html파일로 만든다. (결과 화면은 &lt;a href=&quot;https://goaccess.io/&quot;&gt;https://goaccess.io/&lt;/a&gt;를 참고)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;goaccess 2_delete_redirect -a -o 2_delete_redirect.html&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;결과를 대략 정리해 보면 크롬이 대부분을 차지했고, IE와 엣지는 통틀어 3%가 되지 않았다. IE10은 약 20명 내외였으며 서버 수를 고려한다 해도 절대치가 미미한 수준이었다. 아마도 이제 IE10 지원에 대한 고민은 하지 않아도 될 듯 하다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[시작]]></title><description><![CDATA[…]]></description><link>https://nukeguys.github.io//life/hello-world/</link><guid isPermaLink="false">https://nukeguys.github.io//life/hello-world/</guid><pubDate>Wed, 09 Jan 2019 14:49:39 GMT</pubDate><content:encoded>&lt;p&gt;드디어 오랫동안 만지작거리던 블로그를 완성했다.&lt;br&gt;
좀 더 마음에 들게 만들고 첫 글도 각 잡고 앉아서 쓰고 올리고 싶었으나,
지금까지 시도만 여러번으로 일단 시작하자는 생각에 글을 보여줄 수 있는 정도까지만 만들고 나서 올리려다보니 글이 없으면 에러가 나는 바람에 결국 급하게 글을 작성하고 있다.&lt;/p&gt;
&lt;p&gt;평소에 글을 써보고 싶었으나 맘처럼 안되고 주로 정리하는 내용들이다 보니 기술 블로그 비슷한 것도 하나 해보고 싶어서 네이버부터 티스토리, 미디엄, 브런치, &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt; 그리고 &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;gatsby&lt;/a&gt;까지 시도만 수십 번을 했었다.&lt;br&gt;
결국 제대로 돌아가고 있는건 없고 그나마 유입이 되는건 &lt;a href=&quot;http://nukeguys.tistory.com/&quot;&gt;티스토리(http://nukeguys.tistory.com/)&lt;/a&gt; 정도인 것 같다. 그래봤자 하루에 1~20명 정도지만…&lt;/p&gt;
&lt;p&gt;아직 갈 길은 멀지만 그래도 이렇게 글을 써서 올린다는 것 만으로도 나름 뿌듯한 감이 있다.
이전에는 혼자 시도를 하다보니 지속이 안됐던 것 같은데, 지금은 주변에 블로그를 하시는 분들이 있다보니 같이 힘을 받는 것 같다. 아직은 허접하지만 천천히 하나씩 만들고 채우고 가다보면 그럴 듯 해 지는 날이 오겠지.&lt;/p&gt;
&lt;p&gt;이 글이 블로그의 시작이 되고, 블로그가 올해 목표의 출발점이 되어 앞으로 더 많은 시작을 할 수 있기를 바란다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“끝까지 도달하는 것이 결말을 의미하지는 않는다. 여러 번, 나는 뭔가를 끝내는 것이, 단순히 새로운 길의 시작에 불과한 것인지, 스스로 궁금하다고 생각한다. 그리고 그 질문은, 나를 처음부터 다시 시작하도록 격려해준다.” - 파블로 알보란 -&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;참고한 블로그들&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ahnheejong.name/&quot;&gt;https://ahnheejong.name/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.cometkim.kr/&quot;&gt;https://blog.cometkim.kr/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://adhrinae.github.io/&quot;&gt;https://adhrinae.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blueshw.github.io/&quot;&gt;https://blueshw.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.hax0r.info/&quot;&gt;https://blog.hax0r.info/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;Thanks to&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;gatsby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bulma.io/&quot;&gt;bulma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/&quot;&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fonts.google.com&quot;&gt;google font&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>