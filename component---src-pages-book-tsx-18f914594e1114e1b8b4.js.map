{"version":3,"sources":["webpack:///./src/components/Post.tsx","webpack:///./src/components/PosterList.tsx","webpack:///./src/pages/book.tsx"],"names":["Post","render","post","this","props","title","frontmatter","fields","slug","id","className","date","description","tags","map","tag","key","Component","PosterList","posts","node","to","React","BookIndex","data","site","allMarkdownRemark","edges","siteMetadata","showIntro","intro","keywords","pageQuery"],"mappings":"oIAkCeA,E,gLA1BbC,OAAA,WAAS,IACCC,EAASC,KAAKC,MAAdF,KACFG,EAAQH,EAAKI,YAAYD,OAASH,EAAKK,OAAOC,KACpD,OACE,yBAAKC,GAAG,OAAOC,UAAU,sBACvB,yBAAKA,UAAU,uDACZL,GAEH,yBAAKK,UAAU,2CACZR,EAAKI,YAAYK,MAEpB,yBAAKD,UAAU,sCACZR,EAAKI,YAAYM,aAEpB,yBAAKF,UAAU,QACZR,EAAKI,YAAYO,KAAKC,KAAI,SAAAC,GAAG,OAC5B,0BAAMC,IAAKD,EAAKL,UAAU,OAA1B,IACIK,S,GAlBGE,a,ICGbC,E,gLACJjB,OAAA,WAAS,IACCkB,EAAUhB,KAAKC,MAAfe,MAER,OACE,oCACGA,EAAML,KAAI,YAAc,IAAXM,EAAW,EAAXA,KACZ,OACE,yBAAKV,UAAU,WAAWM,IAAKI,EAAKb,OAAOC,MACzC,kBAAC,OAAD,CAAME,UAAU,WAAWW,GAAID,EAAKb,OAAOC,MACzC,kBAAC,EAAD,CAAMN,KAAMkB,W,GAVHE,IAAML,WAoBhBC,O,gJCff,IAEMK,E,gLACJtB,OAAA,WAAS,MAC6BE,KAAKC,MAAMoB,KAAvCC,EADD,EACCA,KAAMC,EADP,EACOA,kBACRP,EAAQO,EAAoBA,EAAkBC,MAAQ,GAE5D,OACE,kBAAC,IAAD,CAAQC,aAAcH,EAAKG,aAAcC,WAAW,EAAMC,MARlD,oCASN,kBAAC,IAAD,CACEzB,MAAM,WACN0B,SAAU,CAAC,OAAD,iCAEZ,kBAAC,IAAD,CAAYZ,MAAOA,M,GAXHG,IAAML,WAiBfM,YAER,IAAMS,EAAY","file":"component---src-pages-book-tsx-18f914594e1114e1b8b4.js","sourcesContent":["import React, { Component } from 'react';\nimport { IMarkdownRemark } from 'type';\n\ninterface IProps {\n  post: IMarkdownRemark;\n}\n\nclass Post extends Component<IProps> {\n  render() {\n    const { post } = this.props;\n    const title = post.frontmatter.title || post.fields.slug;\n    return (\n      <div id=\"post\" className=\"has-text-grey-dark\">\n        <div className=\"has-text-weight-semibold is-size-4 is-size-5-mobile\">\n          {title}\n        </div>\n        <div className=\"is-uppercase is-size-7 is-size-7-mobile\">\n          {post.frontmatter.date}\n        </div>\n        <div className=\"summary is-size-6 is-size-6-mobile\">\n          {post.frontmatter.description}\n        </div>\n        <div className=\"tags\">\n          {post.frontmatter.tags.map(tag => (\n            <span key={tag} className=\"tag\">\n              #{tag}\n            </span>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Post;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport { IPageProps } from '../common';\nimport { INode } from 'type';\nimport Post from 'components/Post';\n\nexport interface IProps {\n  posts: INode[];\n}\n\nclass PosterList extends React.Component<IProps> {\n  render() {\n    const { posts } = this.props;\n\n    return (\n      <>\n        {posts.map(({ node }) => {\n          return (\n            <div className=\"postItem\" key={node.fields.slug}>\n              <Link className=\"postLink\" to={node.fields.slug}>\n                <Post post={node} />\n              </Link>\n            </div>\n          );\n        })}\n      </>\n    );\n  }\n}\n\nexport default PosterList;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from 'layout/index';\nimport SEO from 'components/Seo';\nimport { IPageProps } from '../common';\nimport { ISite, IAllMarkdownRemark } from 'type';\nimport PosterList from 'components/PosterList';\n\ninterface IProps extends IPageProps {\n  data: {\n    site: ISite;\n    allMarkdownRemark: IAllMarkdownRemark;\n  };\n}\n\nconst intro = \"We read to know we're not alone.\";\n\nclass BookIndex extends React.Component<IProps> {\n  render() {\n    const { site, allMarkdownRemark } = this.props.data;\n    const posts = allMarkdownRemark ? allMarkdownRemark.edges : [];\n\n    return (\n      <Layout siteMetadata={site.siteMetadata} showIntro={true} intro={intro}>\n        <SEO\n          title=\"nuKeguyS\"\n          keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n        />\n        <PosterList posts={posts} />\n      </Layout>\n    );\n  }\n}\n\nexport default BookIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { eq: \"book\" } } }\n    ) {\n      edges {\n        node {\n          excerpt\n          html\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY/MM/DD\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}