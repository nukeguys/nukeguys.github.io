{"data":{"site":{"siteMetadata":{"title":"nukeguys blog","author":"nukeguys"}},"markdownRemark":{"id":"7d93fed5-8b0a-59c5-8401-5434023d4517","excerpt":"Sorting: Comparator - medium n개의  이름, 점수 들을 점수순 내림차순 정렬, 점수가 같을 경우 이름 오름차순으로 정렬 후 출력하는 class 작성 _ _ repr _ _ , cmp to key Fraudulent Activity Notification…","html":"<h2>Sorting: Comparator - medium</h2>\n<p><code class=\"language-text\">문제요약</code></p>\n<p>n개의 [이름, 점수]들을 점수순 내림차순 정렬, 점수가 같을 경우 이름 오름차순으로 정렬 후 출력하는 class 작성</p>\n<p><code class=\"language-text\">Sample Input</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">5\namy 100\ndavid 100\nheraldo 50\naakansha 75\naleksa 150</code></pre></div>\n<p><code class=\"language-text\">Sample output</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">aleksa 150\namy 100\ndavid 100\naakansha 75\nheraldo 50</code></pre></div>\n<p><code class=\"language-text\">풀이</code></p>\n<p>__repr__, cmp<em>to</em>key</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">comparator</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">.</span>score <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">.</span>name <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span>score <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span>score\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token punctuation\">,</span> score <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    score <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span>\n    player <span class=\"token operator\">=</span> Player<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span>\n    data<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">)</span>\n\ndata <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>cmp_to_key<span class=\"token punctuation\">(</span>Player<span class=\"token punctuation\">.</span>comparator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Fraudulent Activity Notification - medium</h2>\n<p><code class=\"language-text\">문제요약</code></p>\n<p>은행에서 고객의 사용 내역을 분석해서 부정행위 알림을 보낸다. n일 동안의 사용 내역 expenditures와 분석을위한 기간 d일이 주어졌을 때, 이전 d일 동안 사용내역의 중앙값(홀수면 가운데, 짝수면 가운데 두 수의 평균)의 2배 이상으로 사용했다면 해당일에 알림을 보낸다. 예를들어 d=3이고 expenditures = [10, 20, 30, 40, 50]이면 첫 3일은 정보 수집기간이고 4일 째에 이전 3일의 중앙값이 20의 2배 이상이므로 알림을 보낸다. 5일 째에는 이전 3일의 중앙값 30의 2배 보다 적게 사용했으므로 알림을 보내지 않는다. 따라서 총 한 번의 알림이 간다. n, d, expenditures가 주어지면 알림이 가는 횟수를 구해서 반환한다. (1&#x3C;= n&#x3C;=2*10^5, 1&#x3C;=d&#x3C;=n, 0&#x3C;=expenditure[i]&#x3C;=200)</p>\n<p><code class=\"language-text\">Sample Input</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">9 5\n2 3 4 2 3 6 8 4 5</code></pre></div>\n<p><code class=\"language-text\">Sample output</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2</code></pre></div>\n<p><code class=\"language-text\">풀이</code></p>\n<p>문제 풀이 자체는 어렵지 않으나 timeout에 주의해야한다. 매번 이전 d일을 정렬하고 중앙값을 구하면 timeout이 발생. 이전 d일 동안은 정렬이 되어 있으니 다음 d일에는 가장 빠른 날짜의 값을 제외하고 새로운 값을 정렬된 상태에서 추가시키면 binary search를 통해 빠르게 정렬을 유지할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">activityNotifications</span><span class=\"token punctuation\">(</span>expenditure<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    trailing <span class=\"token operator\">=</span> expenditure<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>d<span class=\"token punctuation\">]</span>\n    trailing<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    days <span class=\"token operator\">=</span> expenditure<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>days<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        median <span class=\"token operator\">=</span> trailing<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> d<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span>trailing<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> trailing<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span>\n        <span class=\"token keyword\">if</span> days<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> median<span class=\"token punctuation\">:</span>\n            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        delIdx <span class=\"token operator\">=</span> bisect<span class=\"token punctuation\">.</span>bisect_left<span class=\"token punctuation\">(</span>trailing<span class=\"token punctuation\">,</span>expenditure<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        trailing<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>delIdx<span class=\"token punctuation\">)</span>\n        bisect<span class=\"token punctuation\">.</span>insort<span class=\"token punctuation\">(</span>trailing<span class=\"token punctuation\">,</span> days<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> count</code></pre></div>\n<h2>Merge Sort: Counting Inversions - Hard</h2>\n<p><code class=\"language-text\">문제요약</code></p>\n<p>배열 arr에서 i &#x3C; j일 때, arr[i] > arr[j]인 형태가 존재한다. 순서를 바로잡기 위해 인접한 요소들만 swap할 수 있다. d개의 datasets이 주어졌을 때 각각을 정렬하기 위해 수행해야 하는 swap의 수를 출력한다. (1&#x3C;=d&#x3C;=15, 1&#x3C;=n&#x3C;=10^5, 1&#x3C;=arr[i]&#x3C;=10^7)</p>\n<p><code class=\"language-text\">Sample Input</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2\n5\n1 1 1 2 2\n5\n2 1 3 1 2</code></pre></div>\n<p><code class=\"language-text\">Sample output</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0\n4</code></pre></div>\n<p><code class=\"language-text\">풀이</code></p>\n<p>문제의 제목처럼 merge sort를 활용한다. 각 요소들이 순서에 맞는 제자리로 돌아가기 위해 swap을 하는 경우가 merge sort의 merge과정에서 오른쪽 part의 값을 왼쪽 part 사이에 추가되는 경우로 볼 수 있다.</p>\n<p>즉, 1,2,4 / 1, 3, 5을 merge하면 처음엔 왼쪽 1, 그리고 오른쪽 1을 왼쪽 1다음으로 merge가 되는데 이 때 움직이는 거리를 계산하면 남은 왼쪽 part의 길이인 2가 된다. merge sort에서는 별도 메모리를 사용하지만 단순히 제자리에서 생각해보면 [1, 1], 2, 4 / 3, 5가 되므로 swap으로 간주하면 2번의 swap이 필요한셈이다. 따라서 merge sort 수행시 merge 과정에서 오른쪽 부분을 왼쪽 사이로 합치는 과정의 swap 수를 모두 계산하면 된다.</p>\n<p>그러나 마찬가지로 timeout의 변수가 도사리고 있다. python으로 해본 결과 마지막 3개의 t.c에서 timeout이 발생하는데 pypy로 제출하면 정상 통과한다. python3로 해보려 했으나,,, 쉽지 않다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> left <span class=\"token operator\">>=</span> right<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n    mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left<span class=\"token operator\">+</span>right<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    count <span class=\"token operator\">=</span> mergeSort<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span>\n    count <span class=\"token operator\">+=</span> mergeSort<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n\n    l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n    t <span class=\"token operator\">=</span> left\n    <span class=\"token keyword\">while</span> l <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">and</span> r <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            temp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span>\n            t<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> t<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n            count <span class=\"token operator\">+=</span> mid<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            temp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span>\n            t<span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> t<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> l<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">while</span> l <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">:</span>\n        temp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span>\n        t<span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> t<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> l<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> r <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">:</span>\n        temp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span>\n        t<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> t<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> count\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">countInversions</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> mergeSort<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"HackerRank Interview Preparation Kit > Sort","date":"July 05, 2018","tags":["python","study","hackerrank","sort"],"description":"HackerRank의 Interview Preparation Kit > Sorting의 Medium 이상 문제"}}},"pageContext":{"slug":"/2018-07-05-HackerRank-InterVIewPreparationKit-Sorting/","previous":{"fields":{"slug":"/2018-07-11-면접에서-물어봐야-할-질문/"},"frontmatter":{"title":"면접에서 물어봐야 할 질문"}},"next":null}}