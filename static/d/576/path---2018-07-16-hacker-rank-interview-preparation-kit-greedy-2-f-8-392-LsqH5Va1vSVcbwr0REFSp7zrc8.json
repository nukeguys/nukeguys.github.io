{"data":{"site":{"siteMetadata":{"title":"nukeguys blog","author":"nukeguys"}},"markdownRemark":{"id":"b2495ef3-2c4c-5bf5-9ffe-5983b506fd45","excerpt":"HackerRank의 Interview Preparation Kit > Greedy의 Medium 이상 문제 Greedy Florist - medium n개의 꽃 가격 c와 k…","html":"<blockquote>\n<p>HackerRank의 Interview Preparation Kit > Greedy의 Medium 이상 문제</p>\n</blockquote>\n<h2>Greedy Florist - medium</h2>\n<p><code class=\"language-text\">문제요약</code></p>\n<p>n개의 꽃 가격 c와 k명의 사람이 있을 때, 꽃의 가격은 동일한 사람이 꽃을 사면 꽃 가격에 이전 구매 횟수의 배수로 가격이 측정될 때 전체 꽃을 사는 최소 값을 계산(즉 꽃 가격이 [2, 3]이고 한 사람이 꽃을 사면 처음엔 3, 두 번째는 2<em>2로 전체 가격은 7에 살 수 있다. 순서가 바뀌면 2 + 3\\</em>2 = 8이 되므로 최소는 7)</p>\n<p>첫 줄엔 n, k. 두번째 줄엔 c (1&#x3C;=n,k&#x3C;=100, 1&#x3C;=c[i]&#x3C;=10^6, answer&#x3C;2^31, 0&#x3C;=i&#x3C;n)</p>\n<p><code class=\"language-text\">Sample Input</code> </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3 3\n2 5 6</code></pre></div>\n<p><code class=\"language-text\">Sample output</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">13</code></pre></div>\n<p><code class=\"language-text\">풀이</code></p>\n<p>횟 수가 늘어날 수록 가격이 배가 되므로 작은 가격의 꽃을 뒤에 사야한다. 즉 큰 수부터 더하면서 사람의 수가 넘어가면 가격에 *반복된 횟수 만큼 계산하면 최소값을 구할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">getMinimumCost</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    minCost <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    c<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        minCost <span class=\"token operator\">+=</span> c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">//</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> minCost</code></pre></div>\n<h2>Max Min - medium</h2>\n<p><code class=\"language-text\">문제요약</code></p>\n<p>integer배열 arr에서 k개의 subarr을 선택해서 max(subarr)-min(subarr)의 최소값을 계산</p>\n<p>첫 줄에 n, 두번째 줄엔 k, 다음 줄부터 n개의 integer (2&#x3C;=n&#x3C;=10^5, 2&#x3C;=k&#x3C;=n, 0&#x3C;=arr[i]&#x3C;=10^9)</p>\n<p><code class=\"language-text\">Sample Input</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">7\n3\n10\n100\n300\n200\n1000\n20\n30</code></pre></div>\n<p><code class=\"language-text\">Sample output</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">20</code></pre></div>\n<p><code class=\"language-text\">풀이</code></p>\n<p>차를 작게 해야 하므로 인접한 수 끼리의 차를 구해야 하고, 따라서 정렬 후에 i+k-1번째 수와 i번째 수의 차의 최소값을 구하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">maxMin</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    unfairness <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>maxsize\n    arr<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        unfairness <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>unfairness<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unfairness<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> unfairness</code></pre></div>\n<h2>Reverse Shuffle Merge - Advanced</h2>\n<p><code class=\"language-text\">문제요약</code></p>\n<p>문자열 A에 대해서 merge(reverse(A), shuffle(A))인 s가 주어지면 가능 A값 중 문자열 순서로 가장 작은 A를 계산</p>\n<p>reverse(A) : 순서를 역으로 변환, reverse(‘abc’) = ‘cba’</p>\n<p>shuffle(A) : 랜덤으로 섞음</p>\n<p>merge(A1, A2) : A1과 A2의 각각 등장 순서는 유지하되 랜덤하게 합침, merge(‘abc’, ‘def’) = ‘abcdef’ or ‘abdcef’…</p>\n<p><code class=\"language-text\">Sample Input</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">eggegg</code></pre></div>\n<p><code class=\"language-text\">Sample output</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">egg</code></pre></div>\n<p><code class=\"language-text\">풀이</code></p>\n<p>문제 풀이는 비교적 빨리 찾았으나 구현하는데 애먹은 문제</p>\n<p>일단 전체 문자의 등장 횟수의 절반씩을 포함하는 substring이 후보가 되고, shuffle은 랜덤이므로 크게 고려하지 않아도 가능. reverse한 string이 s에 포함되어 있어야 하고 원래의 string이 최소여야 하므로, s를 뒤집어서 s에서 등장횟수(절반)를 만족하는 최소의 부분 수열을 찾아내면 된다.</p>\n<p>즉 s가 ‘abcdefgabcdefg’이면 a부터 g까지 각 2개씩이므로 reverse한 ‘gfedcbagfedcba’에서 a~g까지 하나씩 등장하는 최소 수열을 찾으면 ‘agfedcb’가 정답</p>\n<p>구현은 전체 갯수와 절반의 갯수를 미리 계산해 놓은다음,</p>\n<p>reverse한 string 앞부터 전체 갯수에서 지나간 문자의 갯수를 하나씩 줄이고(현재 이후로 남은 문자 수), 이 수가 절반 갯수를 만족할 때까지(현재 문자를 선택가능) 진행하면서 가장 작은 문자를 선택. 선택 후 절반 갯수에서 해당 문자 수를 하나 줄이고 다음 선택된 다음 문자부터 다시 반복. (Testcase 16은 정답에 오류가 있는 듯.)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">reverseShuffleMerge</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    remainCount <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    aCount <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> remainCount<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        aCount<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n        \n    s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    A <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        minIdx <span class=\"token operator\">=</span> i\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            remainCount<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> remainCount<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> aCount<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> aCount<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>minIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">or</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">[</span>minIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">and</span> aCount<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    minIdx <span class=\"token operator\">=</span> i\n                i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">while</span> minIdx<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">:</span>\n                    remainCount<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                    i <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">break</span>\n        A<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>minIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        aCount<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>minIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"HackerRank Interview Preparation Kit > Greedy","date":null,"tags":["python","study","hackerrank","greedy"],"description":null}}},"pageContext":{"slug":"/2018-07-16-HackerRank-InterviewPreparationKit-Greedy/","previous":{"fields":{"slug":"/2018-07-10-HackerRank-InterViewPreparationKit-Dictionaries-and-hashmaps/"},"frontmatter":{"title":"HackerRank Interview Preparation Kit > Dictionaries and Hashmaps","description":null,"tags":["python","study","hackerrank","dictionary","hash"]}},"next":{"fields":{"slug":"/2018-07-11-면접에서-물어봐야-할-질문/"},"frontmatter":{"title":"면접에서 물어봐야 할 질문","description":null,"tags":["면접","질문"]}}}}