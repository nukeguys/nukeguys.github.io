{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/dev/nextjs-typescript/","result":{"data":{"site":{"siteMetadata":{"title":"nukeguys blog","author":"nukeguys","google_ad_client":"ca-pub-3962171616803555"}},"markdownRemark":{"id":"d85d04de-51b2-5b33-85e2-c41e1184acf5","excerpt":"next.js는 기본적으로 typescript를 지원하고 있기 때문에 typescript를 설치하는 것만으로 쉽게 사용이 가능하다. next.js의 정해진 룰 안에서만 사용한다면 아무런 문제가 되지 않지만 만약 그렇지 않다면 type…","html":"<p>next.js는 기본적으로 typescript를 지원하고 있기 때문에 typescript를 설치하는 것만으로 쉽게 사용이 가능하다. next.js의 정해진 룰 안에서만 사용한다면 아무런 문제가 되지 않지만 만약 그렇지 않다면 type 또한 같이 수정이 필요하다.</p>\n<p>해보면 어렵지 않지만 막상 하려면 살짝 귀찮음이 생긴다. <a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-typescript\">with-typescript</a> 예제로 한 단계씩 수정을 하면서 커스텀 타입을 정의하는 법을 정리해 본다.</p>\n<p>일단 예제 파일을 받아서 열어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx create-next-app --example with-typescript with-typescript-app\n<span class=\"token comment\"># or</span>\n<span class=\"token function\">yarn</span> create next-app --example with-typescript with-typescript-app</code></pre></div>\n<p>작업을 할 대상은 pages/index.tsx 파일이다. 여기에 next에서 제공하는 <a href=\"https://nextjs.org/docs/basic-features/pages#pre-rendering\">pre-rendering</a>을 적용한다고 가정해보자. 여기선 <code>getInitialProps</code>를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> Link <span class=\"token keyword\">from</span> <span class=\"token string\">'next/link'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Layout <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/Layout'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">IndexPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Layout title<span class=\"token operator\">=</span><span class=\"token string\">\"Home | Next.js + TypeScript Example\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello Next<span class=\"token punctuation\">.</span>js 👋<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link href<span class=\"token operator\">=</span><span class=\"token string\">\"/about\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>a<span class=\"token operator\">></span>About<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Layout<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nIndexPage<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInitialProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> IndexPage<span class=\"token punctuation\">;</span></code></pre></div>\n<p>아직은 아무런 type이 적용되어 있지 않다. 그래서 <code>IndexPage.</code>을 입력해도 intellisense에 <code>getInitialProps</code>를 볼 수는 없다. 하지만 nextjs에서는 페이지를 담당하는 컴포넌트를 위한 <code>NextPage</code> 타입을 제공하고 있고 적용하고 다시 타이핑을 해보면 <code>getInitialProps</code>가 나오는 것을 볼 수 있다. 하지만 위의 코드는 에러가 나고 있다. 이유는 <code>getInitialProps</code>의 타입이 객체를 반환하도록 되어 있기 때문이다. 그래서 일단 빈 객체를 반환하도록 수정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> IndexPage<span class=\"token punctuation\">:</span> <span class=\"token function-variable function\">NextPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Layout title<span class=\"token operator\">=</span><span class=\"token string\">\"Home | Next.js + TypeScript Example\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello Next<span class=\"token punctuation\">.</span>js 👋<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link href<span class=\"token operator\">=</span><span class=\"token string\">\"/about\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>a<span class=\"token operator\">></span>About<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Layout<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nIndexPage<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInitialProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> IndexPage<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>NextPage</code>와 관련된 타입을 한 번 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> NextPage<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">IP</span> <span class=\"token operator\">=</span> <span class=\"token constant\">P</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> NextComponentType<span class=\"token operator\">&lt;</span>\n  NextPageContext<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">IP</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">P</span>\n<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">declare</span> <span class=\"token keyword\">type</span> NextComponentType<span class=\"token operator\">&lt;</span>\n  <span class=\"token constant\">C</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseContext</span> <span class=\"token operator\">=</span> NextPageContext<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">IP</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">P</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span> <span class=\"token operator\">=</span> ComponentType<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * Used for initial page load data population. Data returned from `getInitialProps` is serialized when server rendered.\n   * Make sure to return plain `Object` without using `Date`, `Map`, `Set`.\n   * @param ctx Context of `page`\n   */</span>\n\n  getInitialProps<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">IP</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">IP</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>NextPage</code>는 다시 <code>NextComponentType</code>를 사용하고 <code>NextComponentType</code>는 <code>ComponentType</code>과 <code>getInitialProps</code>를 포함하고 있는 것을 알 수 있다. 조금 더 구체적으로 보면 컴포넌트의 props의 타입인 <code>P</code>, <code>getInitialProps</code>의 매개변수 타입 <code>C(NextPageContext)</code>와 반환 타입인 <code>IP</code>를 확인할 수 있다. 그리고 <code>NextPage</code>에서 props의 타입 <code>P</code>만 입력하면 이를 <code>IP</code>로도 함께 사용하는 것을 볼 수 있다. 즉 <code>getInitialProps</code>의 반환 타입을 컴포넌트 props의 타입과 동일하게 한다. (nextjs에서 기본적으로 <code>getInitialProps</code>의 반환 값을 각 페이지 컴포넌트에 <code>props</code>로 넣어준다.)</p>\n<p>이제 위 예제에 있는 <code>title(Home | Next.js + TypeScript Example)</code>과 링크 텍스트인 <code>About</code>을 <code>getInitialProps</code>를 통해 받아온다고 가정하고 코드를 수정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  text<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> IndexPage<span class=\"token punctuation\">:</span> NextPage<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Layout title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello Next<span class=\"token punctuation\">.</span>js 👋<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link href<span class=\"token operator\">=</span><span class=\"token string\">\"/about\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>a<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Layout<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nIndexPage<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInitialProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Home | Next.js + TypeScript Example'</span><span class=\"token punctuation\">,</span>\n  text<span class=\"token punctuation\">:</span> <span class=\"token string\">'About'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> IndexPage<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>Props</code> 인터페이스를 정의하고 이를 사용해서 <code>NextPage&#x3C;Props></code>로 지정해준다. 그러면 <code>getInitialProps</code>의 반환 타입과 <code>IndexPage</code>의 매개변수에 타입이 함께 잡히는 것을 볼 수 있다. 타입을 사용하지 않았을 때 보다 실수할 가능성이 없고 명확해졌다.</p>\n<p>다음으로는 <code>title</code>의 일부를 <code>App</code>을 통해서 받아와서 사용해야 하는 경우라고 가정해보자. <code>redux</code>를 함께 사용한다면 <code>getInitialProps</code>에서 store에 접근해야 하는 경우가 잦은데, 이럴 때 여러 가지 방법이 있겠지만 <a href=\"https://github.com/kirill-konshin/next-redux-wrapper\">next-redux-wrapper</a>를 사용하면 편하다. 실제로 <code>next-redux-wrapper</code>는 <code>getInitialProps</code>의 파라미터로 <code>store</code>를 넘겨준다. 물론 타입 정의도 지원하는데 <code>declare module</code>을 사용해서 기존 <code>NextPageContext</code>에 <code>store</code>를 추가해주고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'next/dist/next-server/lib/utils'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">NextPageContext</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Action</span> <span class=\"token operator\">=</span> AnyAction<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Provided by next-redux-wrapper: The redux store\n     */</span>\n    store<span class=\"token punctuation\">:</span> Store<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>지금은 <code>title</code>을 받는 경우를 대비해 타입을 정의해보자. 우선은 <code>getInitialProps</code>의 매개변수 타입을 확장해야 한다. 기존의 <code>NextPageContext</code>을 확장해서 <code>title</code>을 추가한다. (타입을 정의하는데 <code>interface</code>나 <code>type</code>을 사용할 수 있다. 지금은 <code>type</code>을 사용한다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> MyPageContext <span class=\"token operator\">=</span> NextPageContext <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음으로는 해당 타입을 사용하는 컴포넌트의 타입을 정의한다. 여기서 <code>NextPage</code>를 확장할 수는 없다. 왜냐하면 <code>NextPage</code>는 <code>NextPageContext</code>를 사용하고 있고 변경할 수 없기 때문이다. 정의한 <code>MyPageContext</code>를 사용하려면 <code>NextComponentType</code>을 사용해야 한다. 기본적으로 동일한 형태에 <code>MyPageContext</code>만 변경했지만, getInitialProps 외에 추가적인 커스텀 속성을 정의해서 사용한다면 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> MyPage<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">IP</span> <span class=\"token operator\">=</span> <span class=\"token constant\">P</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> NextComponentType<span class=\"token operator\">&lt;</span>MyPageContext<span class=\"token punctuation\">,</span> <span class=\"token constant\">IP</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">P</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 정의한 <code>MyPage</code>를 컴포넌트에 적용해보면, <code>getInitialProps</code>의 매개변수에도 <code>title</code>이 잡히는 걸 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  text<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> IndexPage<span class=\"token punctuation\">:</span> MyPage<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Layout title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello Next<span class=\"token punctuation\">.</span>js 👋<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link href<span class=\"token operator\">=</span><span class=\"token string\">\"/about\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>a<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Layout<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nIndexPage<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInitialProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">,</span>\n  text<span class=\"token punctuation\">:</span> <span class=\"token string\">'About'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> IndexPage<span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 실제로 동작하기 위해서는 <code>getInitialProps</code>로 <code>title</code>을 넣어주는 과정이 필요하다.</p>\n<p>이를 위해서는 <a href=\"https://nextjs.org/docs/advanced-features/custom-app\">Custom App</a>을 정의해서 사용해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyApp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> AppProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>pageProps<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nMyApp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInitialProps</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">appContext<span class=\"token punctuation\">:</span> AppContext</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> appProps <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> App<span class=\"token punctuation\">.</span><span class=\"token function\">getInitialProps</span><span class=\"token punctuation\">(</span>appContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>appProps <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> MyApp<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 기본 예제를 변형해서 <code>App</code>에서 컴포넌트의 <code>getInitialProps</code>로 <code>title</code>을 넘겨주도록 해본다. 우선 <code>App.getInitialProps</code>대신 컴포넌트의 <code>getInitialProps</code>를 직접 호출한다. 그리고 <code>title</code>을 넘겨주면 된다. 하지만 타입 검사에서 실패한다.</p>\n<p>이유를 알기 위해서는 <code>AppContext</code>를 확인할 필요가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">declare</span> <span class=\"token keyword\">type</span> AppContext <span class=\"token operator\">=</span> AppContextType<span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">declare</span> <span class=\"token keyword\">type</span> AppContextType<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">NextRouter</span> <span class=\"token operator\">=</span> NextRouter<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Component<span class=\"token punctuation\">:</span> NextComponentType<span class=\"token operator\">&lt;</span>NextPageContext<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  AppTree<span class=\"token punctuation\">:</span> AppTreeType<span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">:</span> NextPageContext<span class=\"token punctuation\">;</span>\n  router<span class=\"token punctuation\">:</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>AppContext</code>의 <code>Component</code>는 위에서 만든 <code>MyPageContext</code>를 사용하지 않고 있다. 이를 위해서는 <code>AppContext</code>대신 별도의 타입을 정의해 주어야 한다. 모두 다시 정의해도 되지만 기존 속성을 활용하기 위해 필요한 속성만 새로 정의한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> MyAppContext <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>AppContext<span class=\"token punctuation\">,</span> <span class=\"token string\">'Component'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'ctx'</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n  Component<span class=\"token punctuation\">:</span> MyPage<span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">:</span> MyPageContext<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그리고 타입을 사용해서 <code>title</code>을 넣어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">MyApp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInitialProps</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">appContext<span class=\"token punctuation\">:</span> MyAppContext</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  appContext<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> appProps <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> App<span class=\"token punctuation\">.</span><span class=\"token function\">getInitialProps</span><span class=\"token punctuation\">(</span>appContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>appProps <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>주의할 점은 <code>App.getInitialProps</code>을 사용하고 <code>MyAppContext</code>에서 <code>ctx</code>의 타입을 변경하면서 <code>appContext</code>의 <code>ctx</code>에도 <code>title</code>이 있는 것으로 잡히기 때문에 실제로 추가 없이 그대로 전달해도 문제가 되지 않는다. <code>_app</code>에서 한 번만 처리하고 순서상으론 반대이기 때문에 누락될 위험이 크진 않지만 이것도 명확하게 해 주기 위해서는 <code>MyAppContext</code>에서 <code>ctx</code>를 그대로 사용하고 아래처럼 해줄 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> MyAppContext <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>AppContext<span class=\"token punctuation\">,</span> <span class=\"token string\">'Component'</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n  Component<span class=\"token punctuation\">:</span> MyPage<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nMyApp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInitialProps</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> ctx <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> MyAppContext</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> pageProps <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Component<span class=\"token punctuation\">.</span>getInitialProps<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>ctx<span class=\"token punctuation\">,</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> pageProps <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>실제로 이렇게 까지 사용하는 경우가 얼마나 될지는 모르겠지만, 필요한 경우라면 타입을 명확하게 정의해서 추가적인 검사 코드를 사용하지 않도록 할 수 있어 도움이 되지 않을까 싶다.</p>","frontmatter":{"title":"next.js에 커스텀 타입 사용","date":"2020/09/27 23:29","tags":["nextjs","typescript"],"description":"_app과 페이지 컴포넌트에 타입 추가하기"}}},"pageContext":{"slug":"/dev/nextjs-typescript/","previous":{"fields":{"slug":"/life/analog-vs-digital/"},"frontmatter":{"title":"선택, 디지털 시대와 아날로그"}},"next":null}}}