{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/dev/easy-git/","webpackCompilationHash":"40f303a4c36696716edd","result":{"data":{"site":{"siteMetadata":{"title":"nukeguys blog","author":"nukeguys","google_ad_client":"ca-pub-3962171616803555"}},"markdownRemark":{"id":"f2f601f8-90ac-5df9-9d5d-0347ea14e581","excerpt":"개발을 하다보니 너무나 당연하게도 git을 사용한다. 처음부터 git을 cli로만 사용하다보니 Sourcetree나 Tower 같은 GUI client를 사용하는 것보다 직접 타이핑 하는게 오히려 더 편하게 느껴진다. 하지만 cli…","html":"<p>개발을 하다보니 너무나 당연하게도 git을 사용한다. 처음부터 git을 cli로만 사용하다보니 <a href=\"https://www.sourcetreeapp.com/\">Sourcetree</a>나 <a href=\"https://www.git-tower.com\">Tower</a> 같은 GUI client를 사용하는 것보다 직접 타이핑 하는게 오히려 더 편하게 느껴진다. 하지만 cli 특성상 타이핑이 많거나 반복되는 경우가 생긴다. 게으름이 기술의 발전을 이끈다고 하던가... 귀차니즘이 너무 심해질 때 마다 하나씩 해결했던 방법들을 몇가지 정리해 본다.</p>\n<h2>1. checkout의 귀차니즘</h2>\n<p>작업을 하다보면 새로 만들거나 혹은 리뷰를 위해 다른 브랜치를 pull 하거나 등등으로 여러 브랜치 사이를 이동하는 경우는 흔한 일이다. 그러나 브랜치명이 길다면 매번 입력하는건 여간 귀찮은 일이 아니다. 사실 <a href=\"https://ohmyz.sh/\">Zsh</a>을 사용하고 있어 탭과 방향키 만으로 브랜치를 선택할 수는 있지만 순간 손을 이동해야 한다. 타이핑을 하다가 방향키로 손을 움직이는 것도 번거로워 진 시점에 현재 로컬의 브랜치들의 리스트를 보여주고 번호 입력으로 checkout을 하는 python script(<a href=\"https://github.com/nukeguys/utils\">github</a>)를 작성했었다.\n이외에도 python으로 일에 필요한 것들을 작성했었는데 지금은 사용하지 않고 있다. 동작은 아래에서 확인 할 수 있다.</p>\n<p><a href=\"https://asciinema.org/a/270031\"><img src=\"https://asciinema.org/a/270031.svg\" alt=\"asciicast\"></a></p>\n<h2>2. alias 설정하기</h2>\n<p>option으로 command 자체가 길어지거나, 빈번하게 command를 연속해서 입력해야 하는 경우에는 축약하거나 한 번에 처리하고 싶어진다. 이런 경우에는 <a href=\"https://git-scm.com/book/ko/v2/Git%EC%9D%98-%EA%B8%B0%EC%B4%88-Git-Alias\">alias</a>를 설정할 수 있다. 간단한 git command 부터 bash 함수까지 실행이 가능하기 때문에 생각보다 많은 것들이 가능해진다.</p>\n<p>내가 처음 사용했던건 log를 좀 더 이쁘게 보기 위한 alias 였다. 이후에 사용하면서 필요하다 싶은 것들을 하나씩 추가했다.</p>\n<pre><code class=\"language-bash\">[alias]\n    s = status\n    a = !git add . &#x26;&#x26; git status\n    au = !git add -u . &#x26;&#x26; git status\n    aa = !git add . &#x26;&#x26; git add -u . &#x26;&#x26; git status\n    c = commit\n    cm = commit -m\n    ca = commit --amend # careful\n    ac = !git add . &#x26;&#x26; git commit\n    acm = !git add . &#x26;&#x26; git commit -m\n    l = log --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'\n    ll = log --stat --abbrev-commit\n    lg = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&#x3C;%an>%Creset' --abbrev-commit\n    llg = log --color --graph --pretty=format:'%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an &#x3C;%ae>%Creset %C(bold green)%cr (%ci)' --abbrev-commit\n    d = diff\n    lgdiff = \"!f() { git log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&#x3C;%an>%Creset' --abbrev-commit $1..$2;}; f\"\n    lgraph = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&#x3C;%an>%Creset' --abbrev-commit\n    branch-name = !git rev-parse --abbrev-ref HEAD\n    publish = !git push -u origin $(git branch-name)\n    rm-remote = \"!f() { git push origin --no-verify :$1; }; f\"\n    rb = \"!f() { git branch -D $(git branch | grep -E $1); }; f\"\n    rt = \"!f() { git tag -d $(git tag -l $1); }; f\"\n    rrt = \"!f() { git push origin --no-verify -d $(git tag -l $1); }; f\"\n    aliases = !git config --list | grep 'alias\\\\.' | sed 's/alias\\\\.\\\\([^=]*\\\\)=\\\\(.*\\\\)/\\\\1\\\\\\t => \\\\2/' | sort\n    cb = \"!f() { git checkout -b feature/KG-$1-$2; }; f\"\n</code></pre>\n<p>아래는 내가 가장 빈번하게 사용하는 alias들이다.<br>\n<code>publish</code> - remote에 현재 브랜치 push<br>\n<code>rb</code> - 정규식에 매핑되는 로컬 브랜치 삭제 / <code>rm-remote</code> - remote 브랜치 삭제<br>\n<code>cb</code> - 특정 포맷에 맞게 브랜치 생성 / <code>ca</code> - commit --amend 줄여쓰기<br>\n<code>ac</code> - add, commit 한 번에 하기 / <code>lg</code> - log 이쁘게 보기</p>\n<p>등록된 alias들이 기억나지 않을 땐 <code>git aliases</code>를 통해 list 확인이 가능하다. 구글링하면 유용한 alias들이 많으니 자신이 자주 사용하는 것들을 등록하고 사용하면 생각보다 많이 편리하다.</p>\n<h2>3. commit message에 이슈 번호 자동 입력하기</h2>\n<p>commit message는 어느정도 가이드라인을 지켜주는게 이력들을 볼 때 편하다. 하지만 매번 기억하기는 어렵기 때문에 commit시 템플릿을 사용하도록 설정해 놓으면 잊지 않고 지킬 수 있다. template 설정도 alias처럼 config 파일에 직접 추가하거나 <code>git config --global commit.template ~/.gitmessage.txt</code> command를 사용할 수 있다.(global 옵션을 사용하지 않으면 repository별로 설정도 가능하다.) 난 개인적으로 <a href=\"https://chris.beams.io/posts/git-commit/\">How to Write a Git Commit Message</a>를 참고해서 아래와 같은 template을 사용하고 있다.</p>\n<pre><code class=\"language-bash\"># &#x3C;type>: (If applied, this commit will...) &#x3C;subject> (Max 50 char)\n# |&#x3C;----  Using a Maximum Of 50 Characters  ---->|\n[ISSUE-NUMBER]\n\n# Explain why this change is being made\n# |&#x3C;----   Try To Limit Each Line to a Maximum Of 72 Characters   ---->|\n\n\n# Provide links or keys to any relevant tickets, articles or other resources\nResolves: ISSUE-NUMBER\n\n# --- COMMIT END ---\n# Type can be\n#    feat     (new feature)\n#    fix      (bug fix)\n#    refactor (refactoring production code)\n#    style    (formatting, missing semi colons, etc; no code change)\n#    docs     (changes to documentation)\n#    test     (adding or refactoring tests; no production code change)\n#    chore    (updating grunt tasks etc; no production code change)\n# --------------------\n# Remember to\n#    Capitalize the subject line\n#    Use the imperative mood in the subject line\n#    Do not end the subject line with a period\n#    Separate subject from body with a blank line\n#    Use the body to explain what and why vs. how\n#    Can use multiple lines with \"-\" for bullet points in body\n# --------------------\n</code></pre>\n<p>그런데 최근에 계속 작성을 하면서 issue 번호를 입력하는 부분이 너무 번거로웠다. 왜냐하면 기본적으로 branch 명에 이슈 번호를 포함해서 정해진 포맷으로 사용하고 있고(이것도 귀찮아서 만든게 <code>cb</code> alias다.) commit시 현재 브랜치명에서 issue 번호를 가져다 template을 자동으로 채워주면 좋겠다는 생각이 들었다.\n그래서 <code>prepare-commit-msg</code> hook을 작성했다. hook은 git workflow의 전후로 script를 실행할 수 있게 해준다. (설정 방법과 자세한 설명은 <a href=\"https://git-scm.com/book/ko/v2/Git%EB%A7%9E%EC%B6%A4-Git-Hooks\">Git - Git 훅</a>을 참고)\n직접 hook directory에 파일을 작성할 수도 있지만 <a href=\"https://github.com/typicode/husky\">husky</a>를 사용하면 hook을 좀 더 쉽게 관리할 수도 있다.</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n\nCOMMIT_MSG_FILE=$1\nISSUE_NUMBER_TAG='ISSUE-NUMBER'\n\nbranch_name=`git rev-parse --abbrev-ref HEAD`\nissue_number=`echo ${branch_name} | sed -n 's/^feature\\/\\(.*-[0-9]*\\)-.*/\\1/p'`\n\nif [ -n \"$issue_number\" ]; then\n  sed -i \".bak\" \"s/${ISSUE_NUMBER_TAG}/${issue_number}/g\" ${COMMIT_MSG_FILE}\nfi\n</code></pre>\n<h2>4. tig (text-mode interface for Git) 사용</h2>\n<p><a href=\"https://github.com/jonas/tig\">tig</a>는 텍스트 기반의 git client다. 따라서 terminal 벗어나지 않아도 되고 커스터마이징이 가능하기 때문에 잘만 사용하면 상당히 유용하다. (나도 간단하게만 사용하고 있는데 좀 더 활용을 해보고 나중에 다시 정리해봐야겠다.)\ntig 메뉴얼은 친절하게 한국어로 번역(<a href=\"https://ujuc.github.io/2016/02/10/tig-manual/\">[번역] Tig Manual</a>)된 것이 있으니 한 번 읽어보면 좋을 듯하다.</p>\n<p>이외에도 github 사용을 편하게 만들어주는 <a href=\"https://hub.github.com/\">hub</a>도 있고, 간단한 설정이나 script를 작성하면 cli를 사용하는 불편함들을 많이 제거할 수 있다.</p>","frontmatter":{"title":"Git 사용 팁 정리","date":"2019/09/21 10:55","tags":["git","cli","git-hook","alias"],"description":"git cli를 사용하다 생긴 귀차니즘 없애기"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/dev/easy-git/","previous":{"fields":{"slug":"/life/i-wish/"},"frontmatter":{"title":"보름달에 소원 빌기"}},"next":{"fields":{"slug":"/book/dept-and-rich-9788950967789/"},"frontmatter":{"title":"빚 권하는 사회에서 부자되는 법"}}}}}